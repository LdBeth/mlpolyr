let (* library *)
    fun s2i x = String.toInt x
    fun i2s x = String.fromInt x
    fun print x = String.output (i2s x)
    fun println x = (String.output (i2s x); String.output ("\n"))

    fun assert (id, x, y) =
        if x == y
        then (String.output "#"; print id; String.output " is right."; String.output "\n")
        else (String.output "#"; print id; String.output " is wrong."; String.output "\n")



	(* test cases *)
	fun run () = (
		(* basic *)
		assert (1,	
			let fun f x = let val {x=a, y=b, ...=c} = x in a end
			in f {x=1, y=true, z=[]} end, 1);

		assert (2,	
			let fun f x = let val {x=a, ...=c} = x in c end
				fun f' x = x.y
			in f' (f {x=true, y=5, z=[]} ) end, 5);

		assert (3,	
			let fun f x = let val {x=a, ...=c} = x in a end
				fun g _ = f {x=1, y=true, z=[]} 
				fun g' _ = f {x=true, z=[]} 
			in g () end, 1);

		assert (4,	
			let fun f x = let val {x=a, y=b, ...=c} = x in a end
				fun g _ = f {x=1, y=true, z=[]} 
				fun g' _ = f {x=true, y=[], z=[]} 
			in g () end, 1);

		assert (5,	
			let fun f x = let val {x=a, ...=c} = x in a end
				fun g _ = f {x=1, y=true}
			in g () end, 1);
		assert (6,	
			let fun f x = let val {x=a, ...=c} = x in c	end (* SEL (r,1,3) *)
				fun g x = let val {y=a, ...=c} = f x in a end (* SEL (r,1,2) *)
			in g {x=true, y=5, z=[]} end, 5);

		assert (7,	
			let fun g x = let val {y=a, ...=c} = {y=x.y, z=x.z} in a end
			in g {x=true, y=5, z=[]} end, 5);

		assert (8,	
			let fun f x = let val {...=c} = x in c end (* SEL (r,0,3) *)
				fun g x = let val {x=_, y=a, ...=c} = f x in a end (* SEL (r,2,3) *)
			in g {x=true, y=5, z=[]} end, 5);

		assert (9,	
			let fun f x = let val {x=a, ...=c} = x in c end
				fun g _ = let val {y=a, ...=c} = 
                  f {x=true, y=5, z=[]} in a end
			in g() end, 5);

		assert (10,	
			let fun f {x=a, ...=c} = c (* SEL (r,1,3) *)
				fun g x = let val {y=a, ...=c} = f x in a end (* SEL (r,1,2) *)
			in g {x=true, y=5, z=[]} end, 5)
	)

in (run (); 0)
end
