let (* basic library *)

	fun print x = (String.output (String.fromInt x))
	fun println x = (String.output (String.fromInt x); String.output ("\n"))
	fun assert (id, x, y) = 
		if x == y 
		then (String.output "#"; print id; String.output " is right."; String.output "\n")
		else (String.output "#"; print id; String.output " is wrong."; String.output "\n")

	(* utility function *)
	fun f (x, y, z) = (x, y, z)
	fun f' (x, y, z) = {x=x, y=y, z=z}
	fun f'' (x, y, z) = (x, y+z)
	fun f''' (x, y, z) = (x, {x=y,y=y},z)
	fun g (x, y, z) = x + y + z
	fun g' (x, y, z) = (x + y, y)

	(* main test *)
	fun run _ = (
		assert (1, let val {x=a, ...=_} = {x=1, y=2, z=3} in a end, 1); (* ans : 1 *)

		assert (2, let val {x=a, ...=c} = {x=1, y=2, z=2} in c.z end, 2); (* ans : 2 *)

		assert (3, let val {x=a, ...=c} = 
			{x=1, y=let fun f y=y.x in f end, z=3} in c.y {x=2} end, 2); (* ans : 2 *)

		(* record *)
		assert (4, 1, 1); (* for filling empty test case *)
		assert (5, let val {x=_, y=b, z=c} = f'(1,2,3) in b end, 2); (* ans : 2 *)
		assert (6, let val {x=_, y=b, z=c} = f'(1,2,3) in b end, 2); (* ans : 2 *)
		assert (7, let val {x=_, y=b, z=c} = f'(1,2,3) in b end, 2); (* ans : 2 *)

		(* simple case / w/o nested case *)
		assert (8, let fun tmp (x,y,z) = 
			let val (p1,p2,p3) = (x,y,z) in p2 end (* ans : 2 *)
			in tmp (1,2,3) end, 2);

		assert (9, let fun tmp (x,y,z) = 
			let val (p1,p2,p3) = f(x,y,z) in p2 end (* ans : 2 *)
			in tmp (1,2,3) end, 2);

		assert (10, let fun tmp (x,y,z) = 
			let val (p1,_,p3) = (x,y,z) in p3 end (* ans : 3 *)
			in tmp (1,2,3) end, 3);

		assert (11, let fun tmp (x,y,z) = 
			let val {x=a, y=b, z=c} = {x=x, y=y, z=z} in b end (* ans : 2 *)
			in tmp (1,2,3) end, 2);

		assert (12, let fun tmp (x,y,z) = 
			let val {x=a, y=b, z=c} = f'(x,y,z) in b end (* ans : 2 *)
			in tmp (1,2,3) end, 2);

		assert (13, let fun tmp (x,y,z) = 
			let val {x = a, y = b, z = c} = {x = x, y = y, z = z} in g (a, b, 3) end
			(* ans : 6 *)
			in tmp (1,2,3) end, 6);

		assert (14, let fun tmp (x,y,z) = 
			let val {x = a, y = b, z = c} = f'(x, y, z) in g (a, b, c) end (* ans : 6 *)
			in tmp (1,2,3) end, 6);

		(* nested case *)
		assert (15, let fun tmp (x,y,z) = 
			let val (p1,{x=p21,y=p22},p3) = (x,{x=y,y=y},z) in p1+p21 end (* ans : 3 *)
			in tmp (1,2,3) end, 3);

		assert (16, let fun tmp (x,y,z) = 
			let val {x = a, y = b, z = c} = {x = x, y = {x=1,y=2}, z = z} in g (a, z, 3)end  
			(* ans : 7 *)
			in tmp (1,2,3) end, 7);

		assert (17, let fun tmp (x,y,z) = 
			let val {x = a, y = b, z = c} = {x = x, y = (1,2), z = z} in g (a, z, 3) end  
			(* ans : 7 *)
			in tmp (1,2,3) end, 7);

		assert (18, let fun tmp (x,y,z) = 
			let val {x=p1,y1=p21,y2=p22,z=z} = {x=x,y1=y,y2=y,z=z} in p21 end (* ans : 2 *)
			in tmp (1,2,3) end, 2);

		assert (19, let fun tmp (x,y,z) = 
			let val (p1,(p21,_),p3) = (x,(y,y),z) in p1+p21 end (* ans : 3 *)
			in tmp (1,2,3) end, 3);

		assert (20, let fun tmp (x,y,z) = 
			let val (p1,(p21,p22),p3) = (x,(y,y),z) in p1+p21 end (* ans : 3 *)
			in tmp (1,2,3) end, 3)
	)

	(* type error *)
	(*
	fun error1 (x,y,z) =
		let {x=a,y=b} = {x=x,z=z} in a (* error : type mismatch *)

	fun error2 (x,y,z) =
		let (p1,_,p3) = (x,y,z) in p2 (* unbound : p2 *)

	fun error3 (x,y,z) =
		let (p1, p2, p3) = (1,2) in g (p1, p2, p3) (* error : missing or extra *)

	fun error4 (x,y,z) =
		let (p1, p2, p3) = f'' (1,2, 3) in g (p1, p2, p3) (* error : missing or extra *) 

	fun error5 (x,y,z) =
		let {x = a, y = b} = f'(x, y, z) in g (a, b, 3) (* error : missing or extra *)
	*)

in (run ();0)
end
