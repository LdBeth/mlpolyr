let (* basic library *)
	fun print x = (String.output (String.fromInt x))
	fun println x = (String.output (String.fromInt x); String.output ("\n"))
	fun assert (id, x, y) = 
		if x == y 
		then (String.output "#"; print id; String.output " is right."; String.output "\n")
		else (String.output "#"; print id; String.output " is wrong."; String.output "\n")

	(* utility function *)
	fun f (x, y, z) = (x, y, z)
	fun f' (x, y, z) = {x=x, y=y, z=z}
	fun f'' (x, y, z) = (x, y+z)
	fun f''' (x, y, z) = (x, {x=y,y=y},z)
	fun g (x, y, z) = x + y + z
	fun g' (x, y, z) = (x + y, y)

	fun run _ = (
		(* normal case *)
		assert (1, let val (p1, p2, p3) = f(1, 2, 3) in p2 end, 2); (* ans : 2 *)

		(* record *)
		assert (2, let val {x=_, y=b, z=c} = f'(1, 2, 3) in b end, 2); (* and : 2 *)

		assert (3, let val {x=_, y=b, z=c} = f'(1, 2, 3) in b end, 2); (* ans : 2 *)

		(* simple case / w/o nested case *)
		assert (4, let val (p1,p2,p3) = (1,2,3) in p2 end, 2); (* ans : 2 *)
		assert (5, let val (p1,p2,p3) = f(1,2,3) in p2 end, 2); (* ans : 2 *)
		assert (6, let val (p1,_,p3) = (1,2,3) in p3 end, 3); (* ans : 3 *)
		assert (7, let val {x=a, y=b, z=c} = {x=1, y=2, z=3} in b end, 2); (* ans : 2 *)
		assert (8, let val {x=a, y=b, z=c} = f'(1,2,3) in b end, 2); (* ans : 2 *)
		assert (9, let val {x = a, y = b, z = c} = {x=1, y=2, z=3} in g (a, b, c) end, 6); (* ans : 6 *)
		assert (10, let val {x = a, y = b, z = c} = f'(1,2,3) in g (a, b, c) end, 6); (* ans : 6 *)

		(* nested case *)
		assert (11, let val (p1,{x=p21,y=p22},p3) = (1,{x=2,y=2},3) in p1+p21 end, 3); (* ans : 3 *)
		assert (12, let val {x = a, y = b, z = c} = {x=1,y={x=2,y=2},z=3} in g (a, c, 3) end, 7); (* ans : 7 *)
		assert (13, let val {x = a, y = b, z = c} = {x = 1, y = (1,2), z = 3} in g (a, c, 3) end, 7); (* ans : 7 *)
		assert (14, let val {x=p1,y1=p21,y2=p22,z=z} = {x=1,y1=2,y2=2,z=3} in p21 end, 2); (* ans : 2 *)
		assert (15, let val (p1,(p21,_),p3) = (1,(2,2),3) in p1+p21 end, 3); (* ans : 3 *)
		assert (16, let val (p1,(p21,p22),p3) = (1,(2,2),3) in p1+p21 end, 3) (* ans : 3 *)
	)

	(* type error *)
	(*
	fun error1 (x,y,z) =
		let {x=a,y=b} = {x=x,z=z} in a (* error : type mismatch *)

	fun error2 (x,y,z) =
		let (p1,_,p3) = (x,y,z) in p2 (* unbound : p2 *)

	fun error3 (x,y,z) =
		let (p1, p2, p3) = (1,2) in g (p1, p2, p3) (* error : missing or extra *)

	fun error4 (x,y,z) =
		let (p1, p2, p3) = f'' (1,2, 3) in g (p1, p2, p3) (* error : missing or extra *) 

	fun error5 (x,y,z) =
		let {x = a, y = b} = f'(x, y, z) in g (a, b, 3) (* error : missing or extra *)
	*)

in (run ();0)
end
