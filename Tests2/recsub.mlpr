(* record subtraction *)

let (* library *)
    val fromInt = String.fromInt
    val toInt = String.toInt
    val output = String.output
    val outputln = fn x => output (String.concat[x, "<br>"])

    fun outputlist ls =
        case ls of 
          [] => outputln ""
        | hd :: tl => (output hd; output " "; outputlist tl)    

    (* getDriver function extends a record 
     * with {vender:string, year:int} *)
    fun getDriver person = {vender="Toyota", year=1996, ... = person}

    (* by using record subtraction and extension,
     * field rename from vender to makercan be obtained *)
    fun getDriver2 person = 
        let val {vender=a, ... = r} = getDriver person
        in 
           {maker=a, ... = r}
        end

    fun print r = outputlist ["driver = ", r.name, 
                              ", age = ", fromInt r.age,
                              ", vender = ", r.vender,
                              ", year = ", fromInt r.year]
   
    fun print2 r = outputlist ["driver = ", r.name, 
                              ", age = ", fromInt r.age,
                              ", maker = ", r.maker,
                              ", year = ", fromInt r.year]

in
    print (getDriver {age=25, name="Jones", married=true});
    print2 (getDriver2 {age=25, name="Jones", married=true});
    0
end

