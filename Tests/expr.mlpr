let fun mkEval (c, e) =	let fun ev e = match e with c ev in ev e end
    fun c0 ev = nocases

    (* -------------------- *)

    fun con_c other ev =
	cases `Con c => c
        default: other ev

    fun plus_c other ev =
	cases `Plus (x, y) => ev x + ev y
        default: other ev

    fun con_plus_c other = plus_c (con_c other)

    fun eval1 e = mkEval (con_plus_c c0, e)

    (* -------------------- *)

    fun times_c other ev =
	cases `Times (x, y) => ev x * ev y
        default: other ev

    fun con_plus_times_c other = times_c (con_plus_c other)

    fun eval2 e = mkEval (con_plus_times_c c0, e)

    (* -------------------- *)

    fun empty v =
	if String.compare (v, "a") == 0 then 100
	else (String.output "unbound!\n"; 0)

    fun var_c other ev env =
	cases `Var v => env v
        default: other ev env

    fun env_lift c other ev env = c other (ev env)

    fun mkEval_env (c, e) =
	let fun ev env e = match e with c ev env
	in ev empty e
	end

    fun eval3 e =
	mkEval_env (var_c (env_lift con_plus_times_c c0), e)

    fun test3 (e, expected) =
	String.output (String.concat ["expected: ",
				      String.fromInt expected,
				      ", calculated: ",
				      String.fromInt (eval3 e), "\n"])

    val e101 = `Plus (`Var "a", `Con 1)
in String.output "*** going for it:\n";
   test3 (e101, 101);
   0
end
