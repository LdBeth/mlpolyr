let val n = {| i = 1000 |}
    fun withfresh f = let val i = n!i in n!i := i+1; f i end

    (* ---- utilities ---- *)

    fun Let (x, e1, e2) = `App (`Lam ([x], e2), [e1])
    fun kv2kb kv = fn v => `App (kv, [v])
    fun kb2kv kb = withfresh (fn rx => `Lam ([rx], kb (`Var rx)))

    fun cvt_app (cvt, e, el, kv) =
	let fun lc (el, kb) =
		case el of [] => kb []
			 | e :: el => pc (e, el, fn (v, vl) => kb (v :: vl))
	    and pc (e, el, kb) = cvt (e, fn v => lc (el, fn vl => kb (v, vl)))
	in pc (e, el, fn (v, vl) => `App (v, kv :: vl))
	end

    fun cvt_lam (cvt, xl, e) =
	withfresh (fn xk => `Lam (xk :: xl, cvt (e, kv2kb (`Var xk))))

    fun cvt_c cvt =
	cases `Const i => (fn kb => kb (`Const i))
            | `Var x => (fn kb => kb (`Var x))
	    | `Lam (xl, e) => (fn kb => kb (cvt_lam (cvt, xl, e)))
	    | `App (e, el) => (fn kb => cvt_app (cvt, e, el, kb2kv kb))

    fun mkConvert (c, e) =
	let fun cvt (e, kb) = (match e with cc) kb
            with cases cc = c cvt
	in cvt_lam (cvt, [], e)
	end

    fun convert e = mkConvert (cvt_c, e)

    fun cvt_if (cvt, c, t, e, xk) =
	cvt (c, fn cv => `If (cv, cvt (t, fn vt => `App (`Var xk, [vt])),
			         cvt (e, fn ve => `App (`Var xk, [ve]))))

    fun cvt_if_c other_c cvt =
	cases `If (c, t, e) =>
	  (fn kb => withfresh (fn xk =>
		Let (xk, kb2kv kb, cvt_if (cvt, c, t, e, xk))))
        default: other_c cvt

    fun convert_if e = mkConvert (cvt_if_c cvt_c, e)

(*
    fun cvt_lcc_c other_c (cvt, kb) =
        cases `LetCC (x, e) => ...
        default: other_c (cvt, kb)

    fun convert_lcc e = mkConvert (cvt_lcc_c cvt_c, e)

    fun convert_if_lcc e = mkConvert (cvt_lcc_c (cvt_if_c cvt_c), e)
*)
in 0
end
