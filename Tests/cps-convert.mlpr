let fun convert e =
	let val n = {| i = 1000 |}
	    fun newvar f = let val i = n!i in n!i := i+1; f i end

	    (* conversion match for values (anything but App) *)
	    fun value_cvt_m k =
		cases `Const i => k (`Const i)
                    | `Var v => k (`Var v)
		    | `Lam (vl, e) =>
		        newvar (fn kv => k (`Lam (kv :: vl, tail_cvt (e, kv))))

	    (* converter for expressions in general (non-tail) position *)
	    and cvt (e, k) = match e with
                cases `App (e, el) =>
	                newvar (fn v => app_cvt (e, el, `Lam ([v], k (`Var v))))
		default: value_cvt_m k

            (* converter for expressions in tail position *)
            and tail_cvt (e, kv) = match e with
                cases `App (e, el) => app_cvt (e, el, `Var kv)
		default: value_cvt_m (fn x => `App (`Var kv, [x]))

            (* converter for applications, kx represents continuation value *)
            and app_cvt (e, el, kx) =
		cvt (e, fn x => list_cvt  (el, fn xl => `App (x, kx :: xl)))

            (* converter for expression lists *)
            and list_cvt (el, k) = case el of
		[] => k []
	      | h :: t => cvt (h, fn vh => list_cvt (t, fn vt => k (vh :: vt)))
	in (* k0v represents the global continutaion: *)
	    newvar (fn k0v => `Lam ([k0v], tail_cvt (e, k0v)))
	end

    fun out s = String.output s
    fun var v = (out "x"; out (String.fromInt v))

    (* print a list using f for elements: *)
    fun list (f, xs) = case xs of [] => () | x :: xs => list_ne (f, x, xs)
    (* print a non-empty list (head x, tail xs): *)
    and list_ne (f, x, xs) =
	(f x; case xs of [] => () | x :: xs => (out ","; list_ne (f, x, xs)))

    (* match for printing values *)
    fun print_value_m exp =
        cases `Const i => out (String.fromInt i)
            | `Var v => var v
	    | `Lam (vl, e) => (out "\\("; list (var, vl); out ")."; exp e)

    (* match for printing general expressions *)
    fun print_exp_m { body, arg } =
	cases `App (a, al) => (arg a; out "("; list (arg, al); out ")")
        default: print_value_m body

    (* printer for general lambda expressions *)
    fun print e =
	let fun exp e = match e with print_exp_m { body = exp, arg = exp }
	in exp e; out "\n"
	end

    (* printer for lambda expressions that satisfy CPS invariant *)
    fun print_cps e =
	let fun value x = match x with print_value_m exp
            and exp e = match e with print_exp_m { body = exp, arg = value }
	in value e; out "\n"
	end

    (* test case: *)
    val e = `Lam ([0,1,2], `App (`Var 0, [`App (`Var 1, [`Var 2])]))
in print e;
   print (convert e);
   print_cps (convert e);
(* This would be a type error:
   print_cps e;
*)
   0
end
