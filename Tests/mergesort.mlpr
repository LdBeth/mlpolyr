let fun prlist l =
	case l of
	    [] => ()
	  | h :: t =>
	    case t of
		[] => String.output h
              | ht :: tt => (String.output h; String.output ", ";
			     prlist t)

    fun prblist l =
	(String.output "["; prlist l; String.output "]")

    fun mergesort (lt, l) =
	let fun split (l, even, odd) =
		case l of
		    [] => (even, odd)
		  | h :: t =>
		    case t of
			[] => (h :: even, odd)
		      | ht :: tt => split (tt, h :: even, ht :: odd)
	    fun merge (l1, l2) =
		case l1 of
		    [] => l2
		  | h1 :: t1 =>
		    case l2 of
			[] => l1
		      | h2 :: t2 =>
			if lt (h1, h2) then h1 :: merge (t1, l2)
			else h2 :: merge (l1, t2)
	    fun sort l =
		case l of
		    [] => []
		  | h :: t =>
		    case t of
			[] => l
		      | ht :: tt => let val p = split (l, [], [])
				    in merge (sort p.1, sort p.2)
				    end
	in sort l
	end

    fun length l =
	let fun loop (l, n) =
		case l of
		    [] => n
		  | _ :: t => loop (t, n+1)
	in loop (l, 0)
	end

    fun lt (s1, s2) = String.compare (s1, s2) < 0
    val args = String.cmdline_args
    val args_sorted = mergesort (lt, args)
in String.output "sort";
   prblist args;
   String.output " = ";
   prblist args_sorted;
   String.output (String.concat ["\nlength: ",
				 String.fromInt (length args),
				 "\n"]);
   0
end
