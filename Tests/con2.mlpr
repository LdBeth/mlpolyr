let val m_nothing = nocases

    fun m_const ev m_other =
	cases `Const i => i
        default: m_other

    fun m_plus ev m_other =
        cases `Plus (x, y) => ev x + ev y
        default: m_other

    fun m_minus ev m_other =
	cases `Minus (x, y) => ev x - ev y
        default: m_other

    fun ev_constplus e =
        match e with
              m_plus ev_constplus
		     (m_const ev_constplus
			      m_nothing)

    fun ev_constplusminus e =
	match e with
              m_minus ev_constplusminus
		      (m_plus ev_constplusminus
			      (m_const ev_constplusminus
				       m_nothing))

    fun ev_constminus e =
	match e with
              m_minus ev_constminus
		      (m_const ev_constminus
			       m_nothing)
	      
    fun ev_strange e =
	match e with
              m_minus ev_constplus
		      (m_plus ev_constplusminus
			      (m_const ev_constplusminus
				       m_nothing))

    val e0 = `Plus (`Const 1, `Plus (`Const 2, `Const 3))
    val e1 = `Minus (e0, `Const 3)
    val e2 = `Minus (e0, `Minus (e0, `Const 3))

    fun test (n, f) =
	String.output (String.concat [n, ": ", String.fromInt (f ()), "\n"])

    fun foo r = (r.a, r)

    fun tcp0 () = ev_constplus e0
    fun tcpm0 () = ev_constplusminus e0
    fun tcpm1 () = ev_constplusminus e1
    fun foo () = ev_strange e1
(*
    fun bar () = ev_strange e2
*)
(*
    fun tcm1 () = ev_constminus e1
*)
in
    test ("constplus(e0)", tcp0);
    test ("constplusminus(e0)", tcpm0);
    test ("constplusminus(e1)", tcpm1);
    0
end
