let fun m_nothing ev = nocases

    fun m_const m_other ev =
	cases `Const i => i
        default: m_other ev

    fun m_plus m_other ev =
	cases `Plus (x, y) => ev x + ev y
        default: m_other ev

    fun m_minus m_other ev =
	cases `Minus (x, y) => ev x - ev y
        default: m_other ev

    fun ev_constplus e =
	match e with m_plus (m_const m_nothing) ev_constplus

    fun ev_constplusminus e =
	match e with m_minus (m_plus (m_const m_nothing)) ev_constplusminus

    fun ev_constminus e =
	match e with m_minus (m_const m_nothing) ev_constminus

    val e0 = `Plus (`Const 1, `Plus (`Const 2, `Const 3))
    val e1 = `Minus (e0, `Const 3)

    fun test (n, f) =
	String.output (String.concat [n, ": ", String.fromInt (f ()), "\n"])

    fun foo r = (r.a, r)

    fun tcp0 () = ev_constplus e0
    fun tcpm0 () = ev_constplusminus e0
    fun tcpm1 () = ev_constplusminus e1
(*
    fun tcm1 () = ev_constminus e1
*)
in
    test ("constplus(e0)", tcp0);
    test ("constplusminus(e0)", tcpm0);
    test ("constplusminus(e1)", tcpm1);
    0
end
