let fun mergesort (lt, l) =
	let fun split (l, even, odd) =
		case l of
		    [] => (even, odd)
		  | h :: t =>
		    case t of
			[] => (h :: even, odd)
		      | ht :: tt => split (tt, h :: even, ht :: odd)
	    fun merge (l1, l2) =
		case l1 of
		    [] => l2
		  | h1 :: t1 =>
		    case l2 of
			[] => l1
		      | h2 :: t2 =>
			if lt (h1, h2) then h1 :: merge (t1, l2)
			else h2 :: merge (l1, t2)
	    fun sort l =
		case l of
		    [] => []
		  | h :: t =>
		    case t of
			[] => l
		      | ht :: tt => let val p = split (l, [], [])
				    in merge (sort p.1, sort p.2)
				    end
	in sort l
	end

    fun foldl f init l =
	case l of
	    [] => init
	  | h :: t => foldl f (f (h, init)) t

    fun reverse l =
	let fun cons (h, t) = h :: t
	in foldl cons [] l
	end

    fun app f l =
	case l of
	    [] => ()
	  | h :: t => (f h; app f t)

    fun putlines ll = app String.output ll

    fun getlines ll =
	let val l = String.inputLine ()
	in if String.size l == 0 then reverse ll
	   else getlines (l :: ll)
	end

    fun stripnl s =
	let val sz = String.size s
	in if String.sub (s, sz-1) == 10 then
	       String.substring (s, 0, sz-1)
	   else s
	end

    fun lt (s1, s2) = String.compare (stripnl s1, stripnl s2) < 0
    val lines = getlines []
    val sorted_lines = mergesort (lt, lines)
in putlines sorted_lines;
   0
end
